#
# Cookbook Name:: rackspace-cloud-backup
# Recipe:: cloud
#
# Copyright 2013, Rackspace US, Inc.
#
# Apache 2.0
#

include_recipe "rackspace_cloudbackup::ohai_plugin"

#
# Verify mandatory options are set
#
opt_error = false
['rackspace_username', 'rackspace_apikey', 'cloud_notify_email', 'backup_locations'].each do |option|
  if node['rackspace_cloudbackup'][option].nil?
    # Logging, and not raising, here so that all missing args will be logged in one run
    Chef::Log.warn "ERROR: rackspace-cloud-backup::cloud: Mandatory option #{option} unset"
    opt_error = true
  end
end
if opt_error
  raise RuntimeError, "Mandatory option configuration unset, see previous logs for details"
end
# End option verification

case node[:platform]
  when "redhat", "centos"
    yum_repository "cloud-backup" do
      description "Rackspace cloud backup agent repo"
      url "http://agentrepo.drivesrvr.com/redhat/"

      # This will be needed with opscode-yum ~> 3.0, but not present on opscode-yum <3.0.0
      # gpgcheck false
  end
  when "ubuntu","debian"
    apt_repository "cloud-backup" do
      uri "http://agentrepo.drivesrvr.com/debian/"
      arch "amd64"
      distribution "serveragent"
      components ["main"]
      key "http://agentrepo.drivesrvr.com/debian/agentrepo.key"
      action :add
  end
end

package "driveclient" do
  action :upgrade
end

#
# Install deps for the Python scripts
#
package "python-argparse" do
  action :install
end

# Insert our scripts
['configure_run_backup.py', 'run_backup', 'verify_registration.py'].each do |script|
  cookbook_file "/etc/driveclient/#{script}" do
    source script
    mode 00755
    owner "root"
    group "root"
  end
end

execute "Verify Registration" do
  # This script is idempotent and will bounce driveclient on register
  command "/etc/driveclient/verify_registration.py --register -u #{node['rackspace_cloudbackup']['rackspace_username']} -a #{node['rackspace_cloudbackup']['rackspace_apikey']}"
  action :run
end

service "driveclient" do
  action :enable
end

execute "Generate run_backup config" do
  # This script is idempotent
  command "/etc/driveclient/configure_run_backup.py -u #{node['rackspace_cloudbackup']['rackspace_username']} -a #{node['rackspace_cloudbackup']['rackspace_apikey']} -e #{node['rackspace_cloudbackup']['cloud_notify_email']} -i #{node['ipaddress']} --directoryarray '#{node['rackspace_cloudbackup']['backup_locations']}' --endpoint #{node['rackspace_cloudbackup']['rackspace_endpoint']}.backup.api.rackspacecloud.com"
  action :run
end

# This file is generated by configure_run_backup.py but it contains the API key
# Ensure it is only redable by root
file "/etc/driveclient/run_backup.conf.json" do
  owner "root"
  group "root"
  mode "0600"
end


cron "cloud-backup-trigger" do
  if node['rackspace_cloudbackup']['backup_cron_day']
    day node['rackspace_cloudbackup']['backup_cron_day']
  end
  if node['rackspace_cloudbackup']['backup_cron_hour']
    hour node['rackspace_cloudbackup']['backup_cron_hour']
  end
  if node['rackspace_cloudbackup']['backup_cron_minute']
    minute node['rackspace_cloudbackup']['backup_cron_minute']
  end
  if node['rackspace_cloudbackup']['backup_cron_month']
    month node['rackspace_cloudbackup']['backup_cron_month']
  end
  if node['rackspace_cloudbackup']['backup_cron_weekday']
    weekday node['rackspace_cloudbackup']['backup_cron_weekday']
  end
  if node['rackspace_cloudbackup']['backup_cron_user']
    user node['rackspace_cloudbackup']['backup_cron_user']
  end
  if node['rackspace_cloudbackup']['backup_cron_mailto']
    mailto node['rackspace_cloudbackup']['backup_cron_mailto']
  end
  if node['rackspace_cloudbackup']['backup_cron_path']
    path node['rackspace_cloudbackup']['backup_cron_path']
  end
  if node['rackspace_cloudbackup']['backup_cron_shell']
    shell node['rackspace_cloudbackup']['backup_cron_shell']
  end
  if node['rackspace_cloudbackup']['backup_cron_home']
    home node['rackspace_cloudbackup']['backup_cron_home']
  end
  command "/etc/driveclient/run_backup"
  action :create
end

# Clean up after earlier revisions
[ 'auth.py', 'backups_created', 'create_backup.py', '.registered'].each do |target|
  file "/etc/driveclient/#{target}" do
    action :delete
  end
end
