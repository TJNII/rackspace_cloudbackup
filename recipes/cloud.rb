#
# Cookbook Name:: rackspace-cloud-backup
# Recipe:: cloud
#
# Copyright 2013, Rackspace US, Inc.
#
# Apache 2.0
#


case node[:platform]
  when "redhat", "centos"
    yum_repository "cloud-backup" do
      description "Rackspace cloud backup agent repo"
      url "http://agentrepo.drivesrvr.com/redhat/"

      # This will be needed with opscode-yum ~> 3.0, but not present on opscode-yum <3.0.0
      # gpgcheck false
  end
  when "ubuntu","debian"
    apt_repository "cloud-backup" do
      uri "http://agentrepo.drivesrvr.com/debian/"
      arch "amd64"
      distribution "serveragent"
      components ["main"]
      key "http://agentrepo.drivesrvr.com/debian/agentrepo.key"
      action :add
  end
end

package "driveclient" do
  action :upgrade
end

#
# Install Ohai plugin
# This needs to run after DriveClient install so the default bootstrap.json file is present
#
include_recipe "rackspace_cloudbackup::ohai_plugin"

#
# Register agent
#
rackspace_cloudbackup_register_agent "Register #{node['hostname']}" do
  rackspace_api_key  node['rackspace_cloudbackup']['rackspace_apikey']
  rackspace_username node['rackspace_cloudbackup']['rackspace_username']
  action :register
  notifies :restart, 'service[driveclient]'
  # Reload Ohai to load the new agent ID
  notifies :reload, 'ohai[reload]', :immediately
  # And smack the printing ruby block for debug info
  notifies :create, 'ruby_block[print_cloudbackup_info]', :immediately
end
 
#
# Install deps for the Python scripts
#
package "python-argparse" do
  action :install
end

# Insert our scripts
['configure_run_backup.py', 'run_backup'].each do |script|
  cookbook_file "/etc/driveclient/#{script}" do
    source script
    mode 00755
    owner "root"
    group "root"
  end
end

service "driveclient" do
  action :enable
end

rackspace_cloudbackup_configure_cloud_backup "Backup for 23.253.94.54, backing up /mnt" do
  rackspace_api_key    node['rackspace_cloudbackup']['rackspace_apikey']
  rackspace_username   node['rackspace_cloudbackup']['rackspace_username']
  rackspace_api_region node['rackspace']['region']
  inclusions           ["/mnt"]
  version_retention    30
  notify_recipients    "thomas.noonan@rackspace.com"
  frequency            "Manually"
  action :create
end

# This file is generated by configure_run_backup.py but it contains the API key
# Ensure it is only redable by root
file "/etc/driveclient/run_backup.conf.json" do
  owner "root"
  group "root"
  mode "0600"
end


#cron "cloud-backup-trigger" do
#  if node['rackspace_cloudbackup']['backup_cron_day']
#    day node['rackspace_cloudbackup']['backup_cron_day']
#  end
#  if node['rackspace_cloudbackup']['backup_cron_hour']
#    hour node['rackspace_cloudbackup']['backup_cron_hour']
#  end
#  if node['rackspace_cloudbackup']['backup_cron_minute']
#    minute node['rackspace_cloudbackup']['backup_cron_minute']
#  end
#  if node['rackspace_cloudbackup']['backup_cron_month']
#    month node['rackspace_cloudbackup']['backup_cron_month']
#  end
#  if node['rackspace_cloudbackup']['backup_cron_weekday']
#    weekday node['rackspace_cloudbackup']['backup_cron_weekday']
#  end
#  if node['rackspace_cloudbackup']['backup_cron_user']
#    user node['rackspace_cloudbackup']['backup_cron_user']
#  end
#  if node['rackspace_cloudbackup']['backup_cron_mailto']
#    mailto node['rackspace_cloudbackup']['backup_cron_mailto']
#  end
#  if node['rackspace_cloudbackup']['backup_cron_path']
#    path node['rackspace_cloudbackup']['backup_cron_path']
#  end
#  if node['rackspace_cloudbackup']['backup_cron_shell']
#    shell node['rackspace_cloudbackup']['backup_cron_shell']
#  end
#  if node['rackspace_cloudbackup']['backup_cron_home']
#    home node['rackspace_cloudbackup']['backup_cron_home']
#  end
#  command "/etc/driveclient/run_backup"
#  action :create
#end

# Clean up after earlier revisions
[ 'auth.py', 'backups_created', 'create_backup.py', '.registered', 'verify_registration.py' ].each do |target|
  file "/etc/driveclient/#{target}" do
    action :delete
  end
end
