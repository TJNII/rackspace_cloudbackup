#!/usr/bin/env python
#Copyright 2013 Rackspace Hosting, Inc.

#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.


"""
exit codes:
  0 - success
  1 - generic failure
  2 - auth failure
  3 - backup api error
"""


import argparse
import json
import httplib
import sys
import syslog
import time

def cloud_auth(config, args):
    """
    Authenticate and return authentication details via returned dict
    """
    token = ""
    authurl = 'identity.api.rackspacecloud.com'
    jsonreq = json.dumps({'auth': {'RAX-KSKEY:apiKeyCredentials':
                                       {'username': config["authentication"]["apiuser"],
                                        'apiKey': config["authentication"]["apikey"]}}})
    if args.verbose:
        print 'JSON REQUEST: ' + jsonreq

    #make the request
    connection = httplib.HTTPSConnection(authurl, 443)
    if args.verbose:
        connection.set_debuglevel(1)
    headers = {'Content-type': 'application/json'}
    connection.request('POST', '/v2.0/tokens', jsonreq, headers)
    json_response = json.loads(connection.getresponse().read())
    connection.close()

    #process the request
    if args.verbose:
        print 'JSON decoded and pretty'
        print json.dumps(json_response, indent=2)
    try:
        token = json_response['access']['token']['id']
        if args.verbose:
            print 'Token:\t\t', token
    except(KeyError, IndexError):
        #print 'Error while getting answers from auth server.'
        #print 'Check the endpoint and auth credentials.'
        sys.exit(2)
    finally:
        return token

def triggerBackup(locationKey, config, token, args):
    """
    Make a API request to start a backup.
    Returns True on success and False on failure
    """
    
    if config["locations"][locationKey]["enabled"] is False:
        if args.verbose:
            print "INFO: Skipping disabled location %s" % locationKey
        return True        

    # Format from http://docs.rackspace.com/rcbu/api/v1.0/rcbu-devguide/content/startBackup.html
    req = {"Action": "StartManual",
           "Id": config["locations"][locationKey]["BackupConfigurationId"] }

    connection = httplib.HTTPSConnection(config["general"]["endpoint"], 443)
    if args.verbose:
        connection.set_debuglevel(1)
    headers = {'Content-type': 'application/json',
               'X-Auth-Token': token}
    path = "/v1.0/%s/backup/action-requested" % config["general"]["accountID"]

    connection.request('POST', path, json.dumps(req), headers)
            
    # process the request                                                                                                                                                                                
    response = connection.getresponse()
    status = response.status
    json_response = json.loads(response.read())
    connection.close()

    if status is not 200:
        syslog.syslog("run_backup: INFO: Error triggering backup for %s with ID %s" % (location, config["locations"][locationKey]["BackupConfigurationId"]))
        return False

    syslog.syslog("run_backup: INFO: Triggered backup for %s, Backup job ID: %s" % (location, json_response))
    return True

def awakenAgents(args, config, token):
    """
    Make a API request to wake the agents
    """
    
    # http://docs.rackspace.com/rcbu/api/v1.0/rcbu-devguide/content/Wake-Up_Agents-d1003.html
    req = {}

    connection = httplib.HTTPSConnection(config["general"]["endpoint"], 443)
    if args.verbose:
        connection.set_debuglevel(1)
    headers = {'Content-type': 'application/json',
               'X-Auth-Token': token}
    path = "/v1.0/%s/user/wakeupagents" % config["general"]["accountID"]

    connection.request('POST', path, json.dumps(req), headers)
            
    # process the request                                                                                                                                                                                
    response = connection.getresponse()
    status = response.status
    connection.close()

    if status is not 200:
        syslog.syslog("run_backup: ERROR: Error waking up agents"
        sys.exit(3)

    # "You should wait 10-20 seconds after using this operation and then start a backup or restore."
    # http://docs.rackspace.com/rcbu/api/v1.0/rcbu-devguide/content/Wake-Up_Agents-d1003.html
    time.sleep(args.wakedelay)

def loadConfig(args):
    """
    Load json config file and return its contents
    """
    try:
        conf = json.load(open(args.conffile))
    except:
        syslog.syslog("run_backup: ERROR: Failed to read %s" % (args.conffile))
        sys.exit(1)

    return conf

def parseArguments():
    """
    Parse command line arguments
    """
    parser = argparse.ArgumentParser(description='Gets auth data via json',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--conffile', action='store', default="/etc/driveclient/run_backup.conf.json", help="JSON Configuration file to load", type=str)
    parser.add_argument('--wakedelay', action='store', default=30, help="Number of seconds to delay after waking agents (DELAY REQUIRED)", type=int)
    parser.add_argument('--verbose', '-v', action='store_true', help='Turn up verbosity to 10')    
 
    args = parser.parse_args()

    return args


if __name__ == '__main__':
    args = parseArguments()
    config = loadConfig(args)
    if args.verbose:
        print "Config:"
        print config
        print ""


    token = cloud_auth(config, args)
    awakenAgents(args, config, token)

    failure = False
    for location in config["locations"].keys():
        if not triggerBackup(location, config, token, args):
            failure = True

    if failure:
        sys.exit(3)
    
    sys.exit(0)
